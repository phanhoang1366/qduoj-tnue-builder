diff --git a/Dockerfile b/Dockerfile
index d0190fc1..fda2b544 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -5,7 +5,7 @@ WORKDIR /app
 RUN <<EOS
 set -ex
 apk add unzip
-wget https://github.com/QingdaoU/OnlineJudgeFE/releases/download/oj_2.7.5/dist.zip
+wget https://github.com/phanhoang1366/OnlineJudgeFE/releases/download/v2025.06.23/dist.zip
 unzip dist.zip
 rm -f dist.zip
 EOS
diff --git a/account/decorators.py b/account/decorators.py
index 0b6f236d..845781c3 100644
--- a/account/decorators.py
+++ b/account/decorators.py
@@ -84,6 +84,18 @@ def check_contest_password(password, contest_password):
         else:
             return False
 
+def check_contest_whitelist(contest, user):
+    """
+    检查用户是否在contest的白名单中
+    :param contest: Contest对象
+    :param user: User对象
+    :return: True if user is in whitelist, False otherwise
+    """
+    if contest.whitelist_enabled:
+        if not contest.whitelist_users.filter(id=user.id).exists() and not user.is_contest_admin(contest):
+            return False
+    return True
+
 
 def check_contest_permission(check_type="details"):
     """
@@ -122,6 +134,10 @@ def check_contest_permission(check_type="details"):
                 if not check_contest_password(request.session.get(CONTEST_PASSWORD_SESSION_KEY, {}).get(self.contest.id), self.contest.password):
                     return self.error("Wrong password or password expired")
 
+            # check whitelist
+            if not check_contest_whitelist(self.contest, user):
+                return self.error("You are not in the contest whitelist")
+
             # regular user get contest problems, ranks etc. before contest started
             if self.contest.status == ContestStatus.CONTEST_NOT_START and check_type != "details":
                 return self.error("Contest has not started yet.")
diff --git a/contest/migrations/0011_auto_20250611_1159.py b/contest/migrations/0011_auto_20250611_1159.py
new file mode 100644
index 00000000..517c6031
--- /dev/null
+++ b/contest/migrations/0011_auto_20250611_1159.py
@@ -0,0 +1,59 @@
+# Generated by Django 3.2.9 on 2025-06-11 11:59
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('contest', '0010_auto_20190326_0201'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='contest',
+            name='whitelist_enabled',
+            field=models.BooleanField(default=False),
+        ),
+        migrations.AlterField(
+            model_name='acmcontestrank',
+            name='submission_info',
+            field=models.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name='contest',
+            name='allowed_ip_ranges',
+            field=models.JSONField(default=list),
+        ),
+        migrations.AlterField(
+            model_name='oicontestrank',
+            name='submission_info',
+            field=models.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name='oicontestrank',
+            name='total_score',
+            field=models.FloatField(default=0),
+        ),
+        migrations.CreateModel(
+            name='ContestWhitelist',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('visible', models.BooleanField(default=True)),
+                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest.contest')),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'db_table': 'contest_whitelist',
+                'unique_together': {('user', 'contest')},
+            },
+        ),
+        migrations.AddField(
+            model_name='contest',
+            name='whitelist_users',
+            field=models.ManyToManyField(blank=True, related_name='contest_whitelist', through='contest.ContestWhitelist', to=settings.AUTH_USER_MODEL),
+        ),
+    ]
diff --git a/contest/migrations/0012_remove_contestwhitelist_visible.py b/contest/migrations/0012_remove_contestwhitelist_visible.py
new file mode 100644
index 00000000..67be90a4
--- /dev/null
+++ b/contest/migrations/0012_remove_contestwhitelist_visible.py
@@ -0,0 +1,17 @@
+# Generated by Django 3.2.9 on 2025-06-23 16:08
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('contest', '0011_auto_20250611_1159'),
+    ]
+
+    operations = [
+        migrations.RemoveField(
+            model_name='contestwhitelist',
+            name='visible',
+        ),
+    ]
diff --git a/contest/models.py b/contest/models.py
index 4616bef9..fa99ea60 100644
--- a/contest/models.py
+++ b/contest/models.py
@@ -8,6 +8,14 @@ from account.models import User
 from utils.models import RichTextField
 
 
+class ContestWhitelist(models.Model):
+    user = models.ForeignKey(User, on_delete=models.CASCADE)
+    contest = models.ForeignKey("Contest", on_delete=models.CASCADE)
+
+    class Meta:
+        db_table = "contest_whitelist"
+        unique_together = (("user", "contest"),)
+
 class Contest(models.Model):
     title = models.TextField()
     description = RichTextField()
@@ -23,6 +31,13 @@ class Contest(models.Model):
     created_by = models.ForeignKey(User, on_delete=models.CASCADE)
     # 是否可见 false的话相当于删除
     visible = models.BooleanField(default=True)
+    whitelist_enabled = models.BooleanField(default=False)
+    whitelist_users = models.ManyToManyField(
+        User,
+        through=ContestWhitelist,
+        related_name="contest_whitelist",
+        blank=True
+    ) # Should this be a JSONField or ManyToManyField? Answer: ManyToManyField is more appropriate for user relationships.
     allowed_ip_ranges = JSONField(default=list)
 
     @property
@@ -41,7 +56,10 @@ class Contest(models.Model):
     def contest_type(self):
         if self.password:
             return ContestType.PASSWORD_PROTECTED_CONTEST
-        return ContestType.PUBLIC_CONTEST
+        elif self.whitelist_users.exists() and self.whitelist_enabled:
+            return ContestType.WHILELIST_CONTEST
+        else:
+            return ContestType.PUBLIC_CONTEST
 
     # 是否有权查看problem 的一些统计信息 诸如submission_number, accepted_number 等
     def problem_details_permission(self, user):
@@ -54,6 +72,14 @@ class Contest(models.Model):
         db_table = "contest"
         ordering = ("-start_time",)
 
+# Auto-delete contest whitelist when the whitelist is not enabled
+from django.db.models.signals import pre_delete, pre_save
+from django.dispatch import receiver
+@receiver(pre_save, sender=Contest)
+def delete_contest_whitelist(sender, instance, **kwargs):
+    if not instance.whitelist_enabled:
+        ContestWhitelist.objects.filter(contest=instance).delete()
+
 
 class AbstractContestRank(models.Model):
     user = models.ForeignKey(User, on_delete=models.CASCADE)
@@ -78,7 +104,7 @@ class ACMContestRank(AbstractContestRank):
 
 
 class OIContestRank(AbstractContestRank):
-    total_score = models.IntegerField(default=0)
+    total_score = models.FloatField(default=0)
     # {"23": 333}
     # key is problem id, value is current score
     submission_info = JSONField(default=dict)
diff --git a/contest/serializers.py b/contest/serializers.py
index 356cddae..cc769c09 100644
--- a/contest/serializers.py
+++ b/contest/serializers.py
@@ -1,8 +1,12 @@
 from utils.api import UsernameSerializer, serializers
+from django import forms
 
 from .models import Contest, ContestAnnouncement, ContestRuleType
 from .models import ACMContestRank, OIContestRank
 
+class UsernamesUploadForm(forms.ModelForm):
+    spj = forms.CharField(max_length=12)
+    file = forms.FileField()
 
 class CreateConetestSeriaizer(serializers.Serializer):
     title = serializers.CharField(max_length=128)
@@ -13,6 +17,10 @@ class CreateConetestSeriaizer(serializers.Serializer):
     password = serializers.CharField(allow_blank=True, max_length=32)
     visible = serializers.BooleanField()
     real_time_rank = serializers.BooleanField()
+    whitelist_enabled = serializers.BooleanField()
+    whitelist_users = serializers.ListField(
+        child=serializers.IntegerField(), allow_empty=True, required=False
+    )
     allowed_ip_ranges = serializers.ListField(child=serializers.CharField(max_length=32), allow_empty=True)
 
 
@@ -25,6 +33,10 @@ class EditConetestSeriaizer(serializers.Serializer):
     password = serializers.CharField(allow_blank=True, allow_null=True, max_length=32)
     visible = serializers.BooleanField()
     real_time_rank = serializers.BooleanField()
+    whitelist_enabled = serializers.BooleanField()
+    whitelist_users = serializers.ListField(
+        child=serializers.IntegerField(), allow_empty=True, required=False
+    )
     allowed_ip_ranges = serializers.ListField(child=serializers.CharField(max_length=32))
 
 
@@ -32,16 +44,29 @@ class ContestAdminSerializer(serializers.ModelSerializer):
     created_by = UsernameSerializer()
     status = serializers.CharField()
     contest_type = serializers.CharField()
+    whitelistNames = serializers.SerializerMethodField()
 
     class Meta:
         model = Contest
         fields = "__all__"
 
+    def get_whitelistNames(self, obj):
+        users = obj.whitelist_users.all()
+        result = []
+        for user in users:
+            real_name = getattr(getattr(user, 'userprofile', None), 'real_name', None)
+            result.append({
+                "username": user.username,
+                "real_name": real_name
+            })
+        return result
+
 
 class ContestSerializer(ContestAdminSerializer):
+    whitelistNames = None  # Hide whitelist names in public API
     class Meta:
         model = Contest
-        exclude = ("password", "visible", "allowed_ip_ranges")
+        exclude = ("password", "visible", "allowed_ip_ranges", "whitelist_users", "whitelist_enabled")
 
 
 class ContestAnnouncementSerializer(serializers.ModelSerializer):
@@ -83,7 +108,7 @@ class ACMContestRankSerializer(serializers.ModelSerializer):
         super().__init__(*args, **kwargs)
 
     def get_user(self, obj):
-        return UsernameSerializer(obj.user, need_real_name=self.is_contest_admin).data
+        return UsernameSerializer(obj.user, need_real_name=obj.user.is_authenticated).data
 
 
 class OIContestRankSerializer(serializers.ModelSerializer):
@@ -98,7 +123,7 @@ class OIContestRankSerializer(serializers.ModelSerializer):
         super().__init__(*args, **kwargs)
 
     def get_user(self, obj):
-        return UsernameSerializer(obj.user, need_real_name=self.is_contest_admin).data
+        return UsernameSerializer(obj.user, need_real_name=obj.user.is_authenticated).data
 
 
 class ACMContesHelperSerializer(serializers.Serializer):
diff --git a/contest/urls/oj.py b/contest/urls/oj.py
index 9e94fa58..f420b2fe 100644
--- a/contest/urls/oj.py
+++ b/contest/urls/oj.py
@@ -4,6 +4,7 @@ from ..views.oj import ContestAnnouncementListAPI
 from ..views.oj import ContestPasswordVerifyAPI, ContestAccessAPI
 from ..views.oj import ContestListAPI, ContestAPI
 from ..views.oj import ContestRankAPI
+from ..views.oj import ParseWhitelistAPI
 
 urlpatterns = [
     url(r"^contests/?$", ContestListAPI.as_view(), name="contest_list_api"),
@@ -12,4 +13,5 @@ urlpatterns = [
     url(r"^contest/announcement/?$", ContestAnnouncementListAPI.as_view(), name="contest_announcement_api"),
     url(r"^contest/access/?$", ContestAccessAPI.as_view(), name="contest_access_api"),
     url(r"^contest_rank/?$", ContestRankAPI.as_view(), name="contest_rank_api"),
+    url(r"^parse-whitelist/?$", ParseWhitelistAPI.as_view(), name="parse_whitelist_api"),
 ]
diff --git a/contest/views/admin.py b/contest/views/admin.py
index 66addb15..da639ff9 100644
--- a/contest/views/admin.py
+++ b/contest/views/admin.py
@@ -28,16 +28,33 @@ class ContestAPI(APIView):
         data["start_time"] = dateutil.parser.parse(data["start_time"])
         data["end_time"] = dateutil.parser.parse(data["end_time"])
         data["created_by"] = request.user
+        data["whitelist_enabled"] = data.get("whitelist_enabled", False)
+        data["whitelist_users"] = data.get("whitelist_users", [])
+        whitelist_user_models = []
         if data["end_time"] <= data["start_time"]:
             return self.error("Start time must occur earlier than end time")
         if data.get("password") and data["password"] == "":
             data["password"] = None
+        
+        for user_id in data["whitelist_users"]:
+            try:
+                user = User.objects.get(id=user_id)
+                ensure_created_by(user, request.user)
+            except User.DoesNotExist:
+                return self.error(f"User with id {user_id} does not exist")
+            except User.MultipleObjectsReturned:
+                return self.error(f"User with id {user_id} is not unique")
+            whitelist_user_models.append(user)
+
+        data.pop('whitelist_users')
+
         for ip_range in data["allowed_ip_ranges"]:
             try:
                 ip_network(ip_range, strict=False)
             except ValueError:
                 return self.error(f"{ip_range} is not a valid cidr network")
         contest = Contest.objects.create(**data)
+        contest.whitelist_users.set(whitelist_user_models)
         return self.success(ContestAdminSerializer(contest).data)
 
     @validate_serializer(EditConetestSeriaizer)
@@ -50,10 +67,23 @@ class ContestAPI(APIView):
             return self.error("Contest does not exist")
         data["start_time"] = dateutil.parser.parse(data["start_time"])
         data["end_time"] = dateutil.parser.parse(data["end_time"])
+        data["whitelist_enabled"] = data.get("whitelist_enabled", False)
+        data["whitelist_users"] = data.get("whitelist_users", [])
+        whitelist_user_models = []
         if data["end_time"] <= data["start_time"]:
             return self.error("Start time must occur earlier than end time")
         if not data["password"]:
             data["password"] = None
+        for user_id in data["whitelist_users"]:
+            try:
+                user = User.objects.get(id=user_id)
+                ensure_created_by(user, request.user)
+            except User.DoesNotExist:
+                return self.error(f"User with id {user_id} does not exist")
+            except User.MultipleObjectsReturned:
+                return self.error(f"User with id {user_id} is not unique") # This should not happen, but just in case
+            whitelist_user_models.append(user)
+        data["whitelist_users"] = whitelist_user_models
         for ip_range in data["allowed_ip_ranges"]:
             try:
                 ip_network(ip_range, strict=False)
@@ -64,7 +94,10 @@ class ContestAPI(APIView):
             cache.delete(cache_key)
 
         for k, v in data.items():
-            setattr(contest, k, v)
+            if k == "whitelist_users":
+                contest.whitelist_users.set(v)
+            else:
+                setattr(contest, k, v)
         contest.save()
         return self.success(ContestAdminSerializer(contest).data)
 
diff --git a/contest/views/oj.py b/contest/views/oj.py
index 4164ec33..c4ffc1f7 100644
--- a/contest/views/oj.py
+++ b/contest/views/oj.py
@@ -1,16 +1,24 @@
 import io
+import tempfile
 
 import xlsxwriter
 from django.http import HttpResponse
 from django.utils.timezone import now
 from django.core.cache import cache
+import pyexcel as pe
+from django.views.decorators.csrf import csrf_exempt
+from django.utils.decorators import method_decorator
+from rest_framework.parsers import MultiPartParser, FormParser
+from rest_framework.views import APIView as DRFAPIView
+from rest_framework.response import Response
 
 from problem.models import Problem
 from utils.api import APIView, validate_serializer
 from utils.constants import CacheKey, CONTEST_PASSWORD_SESSION_KEY
 from utils.shortcuts import datetime2str, check_is_id
-from account.models import AdminType
-from account.decorators import login_required, check_contest_permission, check_contest_password
+from account.models import AdminType, User
+from account.decorators import login_required, check_contest_permission, check_contest_password, check_contest_whitelist
+from account.serializers import EditUserSerializer, UserProfileSerializer
 
 from utils.constants import ContestRuleType, ContestStatus
 from ..models import ContestAnnouncement, Contest, OIContestRank, ACMContestRank
@@ -87,7 +95,6 @@ class ContestPasswordVerifyAPI(APIView):
         request.session.modified = True
         return self.success(True)
 
-
 class ContestAccessAPI(APIView):
     @login_required
     def get(self, request):
@@ -95,9 +102,17 @@ class ContestAccessAPI(APIView):
         if not contest_id:
             return self.error()
         try:
-            contest = Contest.objects.get(id=contest_id, visible=True, password__isnull=False)
+            contest = Contest.objects.get(id=contest_id, visible=True)
         except Contest.DoesNotExist:
             return self.error("Contest does not exist")
+        
+        whitelist_enabled = contest.whitelist_enabled
+        if whitelist_enabled:
+            if check_contest_whitelist(contest, request.user):
+                return self.success({"access": True})
+            else:
+                return self.error("You are not in the contest whitelist")
+        
         session_pass = request.session.get(CONTEST_PASSWORD_SESSION_KEY, {}).get(contest.id)
         return self.success({"access": check_contest_password(session_pass, contest.password)})
 
@@ -127,6 +142,7 @@ class ContestRankAPI(APIView):
         download_csv = request.GET.get("download_csv")
         force_refresh = request.GET.get("force_refresh")
         is_contest_admin = request.user.is_authenticated and request.user.is_contest_admin(self.contest)
+        is_public_ranking = False # POC, will add
         if self.contest.rule_type == ContestRuleType.OI:
             serializer = OIContestRankSerializer
         else:
@@ -141,6 +157,10 @@ class ContestRankAPI(APIView):
                 qs = self.get_rank()
                 cache.set(cache_key, qs)
 
+        # Try to restrict to the current user only if they are not an admin, I will add this as a feature later.
+        if request.user.is_authenticated and not is_contest_admin and not is_public_ranking and not ContestStatus.CONTEST_ENDED:
+            qs = qs.filter(user=request.user)
+
         if download_csv:
             data = serializer(qs, many=True, is_contest_admin=is_contest_admin).data
             contest_problems = Problem.objects.filter(contest=self.contest, visible=True).order_by("_id")
@@ -190,3 +210,35 @@ class ContestRankAPI(APIView):
         page_qs = self.paginate_data(request, qs)
         page_qs["results"] = serializer(page_qs["results"], many=True, is_contest_admin=is_contest_admin).data
         return self.success(page_qs)
+
+@method_decorator(csrf_exempt, name="dispatch")
+class ParseWhitelistAPI(DRFAPIView):
+    parser_classes = [MultiPartParser, FormParser]
+    # authentication_classes = []  # Disable DRF's SessionAuthentication CSRF check
+
+    @login_required
+    def post(self, request):
+        # Disable all auth for now (for debugging)
+        # if not request.user.is_admin():
+        #     return self.error("Permission denied: Only contest admin or super admin can use this API.")
+        # Need some ways to log the user who is using this API
+        if not request.user.is_admin_role():
+            return Response({"error": "Permission denied: Only contest admin or super admin can use this API. Your username is: " + request.user.username}, status=403)
+        file = request.FILES.get("file")
+        if not file:
+            return Response({"error": "No file uploaded"}, status=400)
+        try:
+            ext = file.name.split('.')[-1].lower()
+            if ext not in ["xlsx", "xls", "csv", "ods"]:
+                return Response({"error": "Unsupported file type"}, status=400)
+            with tempfile.NamedTemporaryFile(delete=True, suffix='.' + ext) as tmp:
+                for chunk in file.chunks():
+                    tmp.write(chunk)
+                tmp.flush()
+                sheet = pe.get_sheet(file_name=tmp.name)
+        except Exception as e:
+            return Response({"error": f"Failed to read spreadsheet: {str(e)}"}, status=400)
+        usernames = [str(row[0]).strip() for i, row in enumerate(sheet.rows()) if i > 0 and row and row[0]]
+        user_profiles = list(User.userprofile.related.related_model.objects.filter(user__username__in=usernames))
+        data = UserProfileSerializer(user_profiles, many=True, show_real_name=True).data
+        return Response(data)
\ No newline at end of file
diff --git a/data/public/xlsx/users.xlsx b/data/public/xlsx/users.xlsx
new file mode 100644
index 0000000000000000000000000000000000000000..3cdb3dc744781d7cd081646aaa84290901ae94c1
GIT binary patch
literal 9197
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
CWxb66

literal 0
HcmV?d00001

diff --git a/deploy/entrypoint.sh b/deploy/entrypoint.sh
index 627c75a5..6060e865 100755
--- a/deploy/entrypoint.sh
+++ b/deploy/entrypoint.sh
@@ -3,7 +3,7 @@
 APP=/app
 DATA=/data
 
-mkdir -p $DATA/log $DATA/config $DATA/ssl $DATA/test_case $DATA/public/upload $DATA/public/avatar $DATA/public/website
+mkdir -p $DATA/log $DATA/config $DATA/ssl $DATA/test_case $DATA/public/upload $DATA/public/avatar $DATA/public/website $DATA/public/xlsx
 
 if [ ! -f "$DATA/config/secret.key" ]; then
     echo $(cat /dev/urandom | head -1 | md5sum | head -c 32) > "$DATA/config/secret.key"
@@ -17,6 +17,10 @@ if [ ! -f "$DATA/public/website/favicon.ico" ]; then
     cp data/public/website/favicon.ico $DATA/public/website
 fi
 
+if [ ! -f "$DATA/public/xlsx/users.xlsx" ]; then
+    cp data/public/xlsx/users.xlsx $DATA/public/xlsx
+fi
+
 SSL="$DATA/ssl"
 if [ ! -f "$SSL/server.key" ]; then
     openssl req -x509 -newkey rsa:2048 -keyout "$SSL/server.key" -out "$SSL/server.crt" -days 1000 \
diff --git a/deploy/requirements.txt b/deploy/requirements.txt
index ed9a9337..f21e6124 100644
--- a/deploy/requirements.txt
+++ b/deploy/requirements.txt
@@ -31,3 +31,16 @@ django-dramatiq==0.10.0
 dramatiq==1.12.0
 django-dbconn-retry==0.1.5
 django-cas-ng==4.2.1
+defusedxml==0.7.1
+et_xmlfile==2.0.0
+lml==0.2.0
+odfpy==1.4.1
+openpyxl==3.1.5
+pyexcel==0.7.3
+pyexcel-io==0.6.7
+pyexcel-ods==0.6.0
+pyexcel-xls==0.7.1
+pyexcel-xlsx==0.6.1
+texttable==1.7.0
+xlrd==2.0.1
+xlwt==1.3.0
\ No newline at end of file
diff --git a/problem/serializers.py b/problem/serializers.py
index 2c09a6c9..4fe2fcf1 100644
--- a/problem/serializers.py
+++ b/problem/serializers.py
@@ -24,8 +24,7 @@ class CreateSampleSerializer(serializers.Serializer):
 class CreateTestCaseScoreSerializer(serializers.Serializer):
     input_name = serializers.CharField(max_length=32)
     output_name = serializers.CharField(max_length=32)
-    score = serializers.IntegerField(min_value=0)
-
+    score = serializers.FloatField(min_value=0)
 
 class CreateProblemCodeTemplateSerializer(serializers.Serializer):
     pass
diff --git a/problem/views/admin.py b/problem/views/admin.py
index 5ce9413b..75e3dcc6 100644
--- a/problem/views/admin.py
+++ b/problem/views/admin.py
@@ -186,13 +186,28 @@ class ProblemBase(APIView):
             data["spj_language"] = None
             data["spj_code"] = None
         if data["rule_type"] == ProblemRuleType.OI:
+            # total_score = 0
+            # for item in data["test_case_score"]:
+            #     if item["score"] <= 0:   # item["score"] is now a string for some reason
+            #         return "Invalid score"
+            #     else:
+            #         total_score += item["score"]
+            # data["total_score"] = total_score
             total_score = 0
             for item in data["test_case_score"]:
+                if isinstance(item["score"], str):
+                    try:
+                        item["score"] = float(item["score"])
+                    except ValueError:
+                        return "Invalid score"
                 if item["score"] <= 0:
                     return "Invalid score"
                 else:
                     total_score += item["score"]
-            data["total_score"] = total_score
+            # Check if total_score can be converted to int
+            if total_score != int(total_score):
+                return "Total score must be an integer"
+            data["total_score"] = int(total_score)
         data["languages"] = list(data["languages"])
 
 
diff --git a/utils/constants.py b/utils/constants.py
index 749b20da..aa2f7954 100644
--- a/utils/constants.py
+++ b/utils/constants.py
@@ -8,6 +8,7 @@ class Choices:
 class ContestType:
     PUBLIC_CONTEST = "Public"
     PASSWORD_PROTECTED_CONTEST = "Password Protected"
+    WHILELIST_CONTEST = "Whitelist Contest"
 
 
 class ContestStatus:
